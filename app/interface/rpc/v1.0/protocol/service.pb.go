// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app/interface/rpc/v1.0/protocol/service.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Revision             string   `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	BuildDate            string   `protobuf:"bytes,3,opt,name=buildDate,proto3" json:"buildDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_923824e07cdf4265, []int{0}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResponse) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *VersionResponse) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionResponse)(nil), "service.VersionResponse")
}

func init() {
	proto.RegisterFile("app/interface/rpc/v1.0/protocol/service.proto", fileDescriptor_923824e07cdf4265)
}

var fileDescriptor_923824e07cdf4265 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xbb, 0x4f, 0xc3, 0x30,
	0x10, 0xc6, 0x29, 0x48, 0x84, 0x9a, 0x01, 0xc9, 0x03, 0x8a, 0x02, 0x03, 0xea, 0xc4, 0x82, 0x8f,
	0xc7, 0xc8, 0x44, 0x45, 0xd5, 0x85, 0xa9, 0x03, 0x03, 0x5b, 0xec, 0x5e, 0x83, 0x45, 0xea, 0xb3,
	0x6c, 0xc7, 0xa8, 0xff, 0x3d, 0xaa, 0x1d, 0x83, 0xc4, 0xd2, 0xed, 0xbe, 0x87, 0xf4, 0xfd, 0x6c,
	0x76, 0xd7, 0x5a, 0x0b, 0xda, 0x04, 0x74, 0x9b, 0x56, 0x21, 0x38, 0xab, 0x20, 0x3e, 0x88, 0x7b,
	0xb0, 0x8e, 0x02, 0x29, 0xea, 0xc1, 0xa3, 0x8b, 0x5a, 0xa1, 0x48, 0x06, 0xaf, 0x46, 0xd9, 0x5c,
	0x75, 0x44, 0x5d, 0x8f, 0xb9, 0x27, 0x87, 0x0d, 0xe0, 0xd6, 0x86, 0x5d, 0x6e, 0xcd, 0x90, 0x5d,
	0xbc, 0xa3, 0xf3, 0x9a, 0xcc, 0x0a, 0xbd, 0x25, 0xe3, 0x91, 0xd7, 0xac, 0x8a, 0xd9, 0xaa, 0x27,
	0x37, 0x93, 0xdb, 0xe9, 0xaa, 0x48, 0xde, 0xb0, 0x33, 0x87, 0x51, 0xa7, 0xe8, 0x38, 0x45, 0xbf,
	0x9a, 0x5f, 0xb3, 0xa9, 0x1c, 0x74, 0xbf, 0x7e, 0x6d, 0x03, 0xd6, 0x27, 0x29, 0xfc, 0x33, 0x1e,
	0xdf, 0x58, 0x35, 0x6f, 0xd5, 0x17, 0x9a, 0x35, 0x7f, 0x61, 0xe7, 0x4b, 0x0c, 0xe3, 0xa8, 0xe7,
	0x97, 0x22, 0xe3, 0x89, 0x82, 0x27, 0x16, 0x7b, 0xbc, 0xa6, 0x16, 0xe5, 0x39, 0xff, 0xf8, 0x66,
	0x47, 0xf3, 0xe5, 0xc7, 0xa2, 0xd3, 0xe1, 0x73, 0x90, 0x42, 0xd1, 0x16, 0xf6, 0x08, 0xf8, 0xed,
	0x77, 0x1e, 0x64, 0x9e, 0x80, 0x03, 0x1f, 0xf5, 0x5c, 0x0e, 0x79, 0x9a, 0xae, 0xa7, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf6, 0xdc, 0xb0, 0xb4, 0x5b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
	GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type backendClient struct {
	cc *grpc.ClientConn
}

func NewBackendClient(cc *grpc.ClientConn) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/service.Backend/GetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
	GetVersions(context.Context, *empty.Empty) (*VersionResponse, error)
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_GetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Backend/GetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetVersions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersions",
			Handler:    _Backend_GetVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/interface/rpc/v1.0/protocol/service.proto",
}
